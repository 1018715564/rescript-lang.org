// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "../components/Icon.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_null from "bs-platform/lib/es6/js_null.js";
import FuseJs from "fuse.js";
import * as Markdown from "../components/Markdown.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function applySearch(packages, pattern) {
  var fuseOpts = {
    shouldSort: true,
    includeScore: true,
    threshold: 0.2,
    location: 0,
    distance: 30,
    minMatchCharLength: 1,
    keys: [
      "meta.uid",
      "name",
      "keywords"
    ]
  };
  var fuser = new FuseJs(packages, fuseOpts);
  return fuser.search(pattern);
}

function Packages$SearchBox(Props) {
  var completionValuesOpt = Props.completionValues;
  var value = Props.value;
  var onClear = Props.onClear;
  var placeholderOpt = Props.placeholder;
  var onValueChange = Props.onValueChange;
  var completionValues = completionValuesOpt !== undefined ? completionValuesOpt : [];
  var placeholder = placeholderOpt !== undefined ? placeholderOpt : "";
  var match = React.useState(function () {
        return /* Inactive */1;
      });
  var setState = match[1];
  var state = match[0];
  var textInput = React.useRef(null);
  var onMouseDownClear = function (evt) {
    evt.preventDefault();
    return Curry._1(onClear, undefined);
  };
  var onAreaFocus = function (evt) {
    var el = evt.target;
    var isDiv = (el.type == null);
    if (isDiv && state === /* Inactive */1) {
      return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (el) {
                    el.focus();
                    
                  }));
    }
    
  };
  var onFocus = function (param) {
    return Curry._1(setState, (function (param) {
                  return /* Active */0;
                }));
  };
  var onBlur = function (param) {
    return Curry._1(setState, (function (param) {
                  return /* Inactive */1;
                }));
  };
  var onKeyDown = function (evt) {
    var key = evt.key;
    var ctrlKey = evt.ctrlKey;
    var full = (
      ctrlKey ? "CTRL+" : ""
    ) + key;
    switch (full) {
      case "Escape" :
          return Curry._1(onClear, undefined);
      case "Tab" :
          if (completionValues.length !== 1) {
            return ;
          }
          var targetValue = Belt_Array.getExn(completionValues, 0);
          if (targetValue !== value) {
            evt.preventDefault();
            return Curry._1(onValueChange, targetValue);
          } else {
            return ;
          }
      default:
        return ;
    }
  };
  var onChange = function (evt) {
    evt.preventDefault();
    return Curry._1(onValueChange, evt.target.value);
  };
  return React.createElement("div", {
              className: (
                state === /* Active */0 ? "border-fire" : "border-fire-40"
              ) + " flex items-center border rounded-lg py-4 px-5",
              tabIndex: -1,
              onFocus: onAreaFocus,
              onBlur: onBlur
            }, React.createElement(Icon.MagnifierGlass.make, {
                  className: (
                    state === /* Active */0 ? "text-fire" : "text-fire-80"
                  ) + " w-4 h-4"
                }), React.createElement("input", {
                  ref: textInput,
                  className: "text-16 outline-none ml-4 w-full",
                  placeholder: placeholder,
                  type: "text",
                  value: value,
                  onKeyDown: onKeyDown,
                  onFocus: onFocus,
                  onChange: onChange
                }), React.createElement("button", {
                  className: value === "" ? "hidden" : "block",
                  onFocus: onFocus,
                  onMouseDown: onMouseDownClear
                }, React.createElement(Icon.Close.make, {
                      className: "w-4 h-4 text-fire"
                    })));
}

function Packages$NpmCard(Props) {
  var keywordsOpt = Props.keywords;
  var name = Props.name;
  var description = Props.description;
  var onKeywordSelect = Props.onKeywordSelect;
  var repositoryHref = Props.repositoryHref;
  var npmHref = Props.npmHref;
  var keywords = keywordsOpt !== undefined ? keywordsOpt : [];
  var repoEl;
  if (repositoryHref !== undefined) {
    var name$1 = repositoryHref.startsWith("https://github.com") ? "Github" : (
        repositoryHref.startsWith("https://gitlab.com") ? "Gitlab" : "Repository"
      );
    repoEl = React.createElement("a", {
          href: repositoryHref,
          rel: "noopener noreferrer",
          target: "_blank"
        }, name$1);
  } else {
    repoEl = null;
  }
  var titleHref = Belt_Option.getWithDefault(repositoryHref, npmHref);
  return React.createElement("div", {
              className: "bg-gray-10 py-6 rounded-lg p-4"
            }, React.createElement("a", {
                  className: "font-bold",
                  href: titleHref,
                  target: "_blank"
                }, name), React.createElement("div", {
                  className: "space-x-2"
                }, React.createElement("a", {
                      href: npmHref,
                      target: "_blank"
                    }, "NPM"), repoEl), React.createElement("div", {
                  className: "mt-4 text-16"
                }, description), React.createElement("div", {
                  className: "space-x-2 mt-4"
                }, Belt_Array.map(keywords, (function (keyword) {
                        var onMouseDown = Belt_Option.map(onKeywordSelect, (function (cb, evt) {
                                evt.preventDefault();
                                return Curry._1(cb, keyword);
                              }));
                        var tmp = {
                          key: keyword,
                          className: "hover:pointer px-2 rounded-lg bg-sky-15 text-14"
                        };
                        if (onMouseDown !== undefined) {
                          tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
                        }
                        return React.createElement("button", tmp, keyword);
                      }))));
}

function Packages$Category(Props) {
  var title = Props.title;
  var children = Props.children;
  return React.createElement("div", undefined, React.createElement("h3", {
                  className: "font-sans font-medium text-gray-100 tracking-wide text-14 uppercase mb-2"
                }, title), React.createElement("div", undefined, children));
}

function shouldPackageFilter(pkg) {
  if (pkg.name.startsWith("@elm-react")) {
    return true;
  } else {
    return false;
  }
}

function isOfficialPackage(pkg) {
  if (pkg.name === "bs-platform") {
    return true;
  } else {
    return pkg.name.startsWith("@rescript/");
  }
}

function $$default(props) {
  var match = React.useState(function () {
        return /* All */0;
      });
  var setState = match[1];
  var state = match[0];
  var allPackages = props.packages;
  var packages;
  if (state) {
    var matches = applySearch(allPackages, state._0);
    packages = Belt_Array.map(matches, (function (m) {
            return m.item;
          }));
  } else {
    packages = allPackages;
  }
  var onValueChange = function (value) {
    Curry._1(setState, (function (param) {
            if (value === "") {
              return /* All */0;
            } else {
              return {
                      _0: value,
                      [Symbol.for("name")]: "Filtered"
                    };
            }
          }));
    
  };
  var searchValue = state ? state._0 : "";
  var onClear = function (param) {
    return Curry._1(setState, (function (param) {
                  return /* All */0;
                }));
  };
  var match$1 = Belt_Array.reduce(packages, [
        [],
        []
      ], (function (acc, next) {
          var community = acc[1];
          var official = acc[0];
          if (isOfficialPackage(next)) {
            official.push(next);
          } else if (!shouldPackageFilter(next)) {
            community.push(next);
          }
          return [
                  official,
                  community
                ];
        }));
  var communityPackages = match$1[1];
  var officialPackages = match$1[0];
  var onKeywordSelect = function (keyword) {
    return Curry._1(setState, (function (param) {
                  return {
                          _0: keyword,
                          [Symbol.for("name")]: "Filtered"
                        };
                }));
  };
  var officialCategory = officialPackages.length !== 0 ? React.createElement(Packages$Category, {
          title: "Official Resources",
          children: React.createElement("div", {
                className: "space-y-4"
              }, Belt_Array.map(officialPackages, (function (pkg) {
                      var repositoryHref = pkg.repositoryHref;
                      var name = pkg.name;
                      var tmp = {
                        keywords: pkg.keywords,
                        name: name,
                        description: pkg.description,
                        onKeywordSelect: onKeywordSelect,
                        npmHref: pkg.npmHref,
                        key: name
                      };
                      var tmp$1 = repositoryHref === null ? undefined : Caml_option.some(repositoryHref);
                      if (tmp$1 !== undefined) {
                        tmp.repositoryHref = Caml_option.valFromOption(tmp$1);
                      }
                      return React.createElement(Packages$NpmCard, tmp);
                    })))
        }) : null;
  var communityCategory = communityPackages.length !== 0 ? React.createElement(Packages$Category, {
          title: "Community Resources",
          children: React.createElement("div", {
                className: "space-y-4"
              }, Belt_Array.map(communityPackages, (function (pkg) {
                      var repositoryHref = pkg.repositoryHref;
                      var name = pkg.name;
                      var tmp = {
                        keywords: pkg.keywords,
                        name: name,
                        description: pkg.description,
                        onKeywordSelect: onKeywordSelect,
                        npmHref: pkg.npmHref,
                        key: name
                      };
                      var tmp$1 = repositoryHref === null ? undefined : Caml_option.some(repositoryHref);
                      if (tmp$1 !== undefined) {
                        tmp.repositoryHref = Caml_option.valFromOption(tmp$1);
                      }
                      return React.createElement(Packages$NpmCard, tmp);
                    })))
        }) : null;
  return React.createElement("div", undefined, React.createElement(Markdown.H1.make, {
                  children: "Community Packages"
                }), React.createElement(Packages$SearchBox, {
                  value: searchValue,
                  onClear: onClear,
                  placeholder: "Enter a search term, name, keyword, etc",
                  onValueChange: onValueChange
                }), React.createElement("div", {
                  className: "mt-12 space-y-8"
                }, officialCategory, communityCategory));
}

function getStaticProps(_ctx) {
  var __x = fetch("https://registry.npmjs.org/-/v1/search?text=keywords:rescript");
  var __x$1 = __x.then(function (response) {
        return response.json();
      });
  return __x$1.then(function (data) {
              var pkges = Belt_Array.map(data.objects, (function (item) {
                      var pkg = item.package;
                      return {
                              name: pkg.name,
                              version: pkg.version,
                              keywords: pkg.keywords,
                              description: pkg.description,
                              repositoryHref: Js_null.fromOption(pkg.links.repository),
                              npmHref: pkg.links.npm
                            };
                    }));
              var props = {
                packages: pkges
              };
              return Promise.resolve({
                          props: props,
                          revalidate: 43200
                        });
            });
}

export {
  $$default ,
  $$default as default,
  getStaticProps ,
  
}
/* Icon Not a pure module */
