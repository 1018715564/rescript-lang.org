// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as HighlightJs from "../common/HighlightJs.js";

function langShortname(lang) {
  switch (lang) {
    case "bash" :
        return "sh";
    case "ocaml" :
        return "ml";
    case "reason" :
    case "reasonml" :
        return "re";
    case "text" :
        return "";
    default:
      return lang;
  }
}

function CodeExample(Props) {
  var highlightedLinesOpt = Props.highlightedLines;
  var code = Props.code;
  var showLabelOpt = Props.showLabel;
  var langOpt = Props.lang;
  var highlightedLines = highlightedLinesOpt !== undefined ? highlightedLinesOpt : [];
  var showLabel = showLabelOpt !== undefined ? showLabelOpt : true;
  var lang = langOpt !== undefined ? langOpt : "text";
  var children = HighlightJs.renderHLJS(highlightedLines, undefined, code, lang, undefined);
  var label;
  if (showLabel) {
    var label$1 = langShortname(lang);
    label = React.createElement("div", {
          className: "absolute right-0 px-4 pb-4 bg-gray-5 font-sans text-12 font-bold text-gray-60 "
        }, label$1.toUpperCase());
  } else {
    label = null;
  }
  return React.createElement("div", {
              className: "relative w-full flex-col rounded-none xs:rounded border-t border-b xs:border border-gray-10 bg-gray-5 py-2 text-gray-90"
            }, label, React.createElement("div", {
                  className: "px-4 text-14 pt-4 pb-2 overflow-x-auto -mt-2"
                }, children));
}

function CodeExample$Toggle(Props) {
  var tabs = Props.tabs;
  var match = React.useState(function () {
        return 0;
      });
  var setSelected = match[1];
  var selected = match[0];
  if (tabs.length !== 1) {
    var numberOfItems = tabs.length;
    var tabElements = Belt_Array.mapWithIndex(tabs, (function (i, tab) {
            var label = tab.label;
            var label$1;
            if (label !== undefined) {
              label$1 = label;
            } else {
              var lang = tab.lang;
              label$1 = lang !== undefined ? langShortname(lang).toUpperCase() : String(i);
            }
            var activeClass = selected === i ? "font-medium text-gray-90 bg-gray-5 border-t-2 border-l border-r" : "font-medium hover:text-gray-60 border-t-2 border-gray-20 bg-gray-10 hover:cursor-pointer";
            var onClick = function (evt) {
              evt.preventDefault();
              return Curry._1(setSelected, (function (param) {
                            return i;
                          }));
            };
            var key = label$1 + ("-" + String(i));
            var paddingX = numberOfItems >= 3 ? (
                numberOfItems >= 4 ? "" : "lg:px-8"
              ) : (
                numberOfItems > 0 ? "sm:px-4" : ""
              );
            var style = selected === i ? ({
                  borderColor: "#f4646a #EDF0F2"
                }) : undefined;
            var tmp = {
              key: key,
              className: paddingX + (" flex-none px-4 first:ml-6 xs:first:ml-0 inline-block p-1 rounded-tl rounded-tr " + activeClass),
              onClick: onClick
            };
            if (style !== undefined) {
              tmp.style = Caml_option.valFromOption(style);
            }
            return React.createElement("span", tmp, label$1);
          }));
    var children = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(tabs, selected), (function (tab) {
                var lang = Belt_Option.getWithDefault(tab.lang, "text");
                return HighlightJs.renderHLJS(tab.highlightedLines, undefined, tab.code, lang, undefined);
              })), null);
    return React.createElement("div", {
                className: "relative pt-6 w-full rounded-none text-gray-80"
              }, React.createElement("div", {
                    className: "absolute flex w-full overflow-auto scrolling-touch font-sans bg-transparent text-14 text-gray-40 ",
                    style: {
                      marginTop: "-30px"
                    }
                  }, React.createElement("div", {
                        className: "flex space-x-2"
                      }, tabElements), React.createElement("div", {
                        className: "flex-1 border-b border-gray-10"
                      }, "\u00A0")), React.createElement("div", {
                    className: "px-4 text-14 pb-4 pt-4 overflow-x-auto bg-gray-5 border-gray-10 xs:rounded-b border border-t-1"
                  }, React.createElement("pre", undefined, children)));
  }
  var tab = tabs[0];
  return CodeExample({
              highlightedLines: tab.highlightedLines,
              code: tab.code,
              lang: tab.lang,
              showLabel: true
            });
}

var Toggle = {
  make: CodeExample$Toggle
};

var make = CodeExample;

export {
  make ,
  Toggle ,
  
}
/* react Not a pure module */
