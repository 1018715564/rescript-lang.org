// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Url from "../common/Url.js";
import * as Icon from "./Icon.js";
import * as Next from "../bindings/Next.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Constants from "../common/Constants.js";
import * as DocSearch from "./DocSearch.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as VersionSelect from "./VersionSelect.js";

var link = "no-underline block text-inherit hover:cursor-pointer hover:text-fire-30 text-gray-40 mb-px";

var activeLink = "text-inherit font-medium text-fire-30 border-b border-fire";

function linkOrActiveLink(target, route) {
  if (target === route) {
    return activeLink;
  } else {
    return link;
  }
}

function linkOrActiveLinkSubroute(target, route) {
  if (route.startsWith(target)) {
    return activeLink;
  } else {
    return link;
  }
}

function linkOrActiveApiSubroute(route) {
  var url = Url.parse(route);
  var match = Belt_Array.get(url.pagepath, 0);
  if (match === "api") {
    return activeLink;
  } else {
    return link;
  }
}

var githubHref = "https://github.com/reason-association/rescript-lang.org#rescript-langorg";

var discourseHref = "https://forum.rescript-lang.org";

function Navigation$CollapsibleLink(Props) {
  var title = Props.title;
  var onStateChange = Props.onStateChange;
  var allowHoverOpt = Props.allowHover;
  var id = Props.id;
  var state = Props.state;
  var activeOpt = Props.active;
  var children = Props.children;
  var allowHover = allowHoverOpt !== undefined ? allowHoverOpt : true;
  var active = activeOpt !== undefined ? activeOpt : false;
  var onMouseDown = function (evt) {
    evt.preventDefault();
    evt.stopPropagation();
    return Curry._2(onStateChange, id, state >= 2 ? /* KeepOpen */0 : /* Closed */2);
  };
  var onMouseEnter = function (evt) {
    evt.preventDefault();
    if (allowHover) {
      return Curry._2(onStateChange, id, /* HoverOpen */1);
    }
    
  };
  var isOpen = state < 2;
  var onClick = function (param) {
    
  };
  return React.createElement("div", {
              className: "relative",
              onMouseEnter: onMouseEnter
            }, React.createElement("div", {
                  className: "flex items-center"
                }, React.createElement("a", {
                      className: (
                        active ? activeLink : link
                      ) + (" border-none flex items-center hover:cursor-pointer " + (
                          isOpen ? " text-gray-20" : ""
                        )),
                      onClick: onClick,
                      onMouseDown: onMouseDown
                    }, React.createElement("span", {
                          className: active ? "border-b border-fire" : ""
                        }, title))), React.createElement("div", {
                  className: (
                    isOpen ? "flex" : "hidden"
                  ) + " fixed left-0 border-gray-80 border-t bg-white rounded-bl-xl rounded-br-xl shadow-sm min-w-320 w-full h-full sm:h-auto sm:justify-center",
                  style: {
                    marginTop: "1rem"
                  }
                }, React.createElement("div", {
                      className: "w-full"
                    }, children)));
}

var useOutsideClick = ((outerRef, trigger) => {
      function handleClickOutside(event) {
        if (outerRef.current && !outerRef.current.contains(event.target)) {
          trigger();
        }
      }

      React.useEffect(() => {
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
          document.removeEventListener("mousedown", handleClickOutside);
        };
      });

    });

var useWindowWidth = (() => {
  const isClient = typeof window === 'object';

  function getSize() {
    return {
      width: isClient ? window.innerWidth : undefined,
      height: isClient ? window.innerHeight : undefined
    };
  }

  const [windowSize, setWindowSize] = React.useState(getSize);

  React.useEffect(() => {
    if (!isClient) {
      return false;
    }

    function handleResize() {
      setWindowSize(getSize());
    }

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []); // Empty array ensures that effect is only run on mount and unmount

  if(windowSize) {
    return windowSize.width;
  }
  return null;
  });

function Navigation$DocsSection(Props) {
  var router = Next.Router.useRouter(undefined);
  var url = Url.parse(router.route);
  var match = React.useState(function () {
        var version = url.version;
        if (typeof version === "number") {
          return "latest";
        } else {
          return version._0;
        }
      });
  var setVersion = match[1];
  var version = match[0];
  var languageManual = Constants.languageManual(version);
  var column = function (title, children) {
    return React.createElement("div", {
                className: ""
              }, React.createElement("div", {
                    className: "text-12 font-medium text-gray-100 tracking-wide uppercase"
                  }, title), React.createElement("div", undefined, children));
  };
  var onVersionChange = function (evt) {
    evt.preventDefault();
    var version = evt.target.value;
    "/" + (url.base.join("/") + ("/" + (version + ("/" + url.pagepath.join("/")))));
    return Curry._1(setVersion, (function (param) {
                  return version;
                }));
  };
  var tmp = version === "latest" ? React.createElement("span", {
          className: "text-gray-40 text-12"
        }, "This is the latest docs version") : null;
  return React.createElement("div", {
              className: "w-full bg-white text-gray-40 text-14"
            }, React.createElement("div", {
                  className: "flex justify-center w-full py-2 border-b border-gray-10"
                }, React.createElement("div", {
                      className: "w-full space-x-2 max-w-1280 "
                    }, React.createElement(VersionSelect.make, {
                          onChange: onVersionChange,
                          version: version,
                          availableVersions: Constants.allManualVersions
                        }), tmp)), React.createElement("div", {
                  className: "flex justify-center pt-8 pb-10"
                }, React.createElement("div", {
                      className: "w-full grid grid-cols-3 max-w-1280"
                    }, column("Language Manual", React.createElement("ul", {
                              className: "space-y-1 ml-2 mt-4"
                            }, languageManual.map(function (item) {
                                  var href = item[1];
                                  var text = item[0];
                                  var linkClass = router.route === href ? "text-fire" : "hover:text-fire";
                                  return React.createElement("li", {
                                              key: text
                                            }, React.createElement("span", {
                                                  className: "text-fire mr-2"
                                                }, "-"), React.createElement(Next.Link.make, {
                                                  href: href,
                                                  children: React.createElement("a", {
                                                        className: linkClass
                                                      }, text)
                                                }));
                                }))), column("Ecosystem", React.createElement("ul", undefined)), column("Tools", React.createElement("ul", undefined)))));
}

function Navigation$MobileNav(Props) {
  var route = Props.route;
  var base = "font-normal mx-4 py-5 text-gray-20 border-b border-gray-80";
  var extLink = "block hover:cursor-pointer hover:text-white text-gray-60";
  return React.createElement("div", {
              className: "border-gray-80 border-t"
            }, React.createElement("ul", undefined, React.createElement("li", {
                      className: base
                    }, React.createElement(DocSearch.Textbox.make, {
                          id: "docsearch-mobile"
                        })), React.createElement("li", {
                      className: base
                    }, React.createElement(Next.Link.make, {
                          href: "/try",
                          children: React.createElement("a", {
                                className: linkOrActiveLink("/try", route)
                              }, "Playground")
                        })), React.createElement("li", {
                      className: base
                    }, React.createElement(Next.Link.make, {
                          href: "/blog",
                          children: React.createElement("a", {
                                className: linkOrActiveLinkSubroute("/blog", route)
                              }, "Blog")
                        })), React.createElement("li", {
                      className: base
                    }, React.createElement("a", {
                          className: extLink,
                          href: "https://twitter.com/rescriptlang",
                          rel: "noopener noreferrer",
                          target: "_blank"
                        }, "Twitter")), React.createElement("li", {
                      className: base
                    }, React.createElement("a", {
                          className: extLink,
                          href: githubHref,
                          rel: "noopener noreferrer",
                          target: "_blank"
                        }, "Github")), React.createElement("li", {
                      className: base
                    }, React.createElement("a", {
                          className: extLink,
                          href: discourseHref,
                          rel: "noopener noreferrer",
                          target: "_blank"
                        }, "Forum"))));
}

function Navigation(Props) {
  var fixedOpt = Props.fixed;
  var overlayState = Props.overlayState;
  var fixed = fixedOpt !== undefined ? fixedOpt : true;
  var minWidth = "20rem";
  var router = Next.Router.useRouter(undefined);
  var route = router.route;
  var match = React.useState(function () {
        return [{
                  title: "Docs",
                  children: React.createElement(Navigation$DocsSection, {}),
                  isActiveRoute: (function (route) {
                      var url = Url.parse(route);
                      var match = url.base;
                      var len = match.length;
                      if (len >= 3) {
                        return false;
                      }
                      switch (len) {
                        case 0 :
                            return false;
                        case 1 :
                            var match$1 = match[0];
                            if (match$1 !== "docs") {
                              return false;
                            }
                            break;
                        case 2 :
                            var match$2 = match[0];
                            if (match$2 !== "docs") {
                              return false;
                            }
                            var match$3 = match[1];
                            switch (match$3) {
                              case "gentype" :
                              case "manual" :
                                  break;
                              default:
                                return false;
                            }
                            break;
                        
                      }
                      var match$4 = Belt_Array.get(url.pagepath, 0);
                      if (match$4 === "api") {
                        return false;
                      } else {
                        return true;
                      }
                    }),
                  href: "/docs/manual/latest/api",
                  state: /* KeepOpen */0
                }];
      });
  var setOverlayOpen = overlayState[1];
  var isOverlayOpen = overlayState[0];
  var setCollapsibles = match[1];
  var resetCollapsibles = function (param) {
    return Curry._1(setCollapsibles, (function (prev) {
                  return Belt_Array.map(prev, (function (c) {
                                return {
                                        title: c.title,
                                        children: c.children,
                                        isActiveRoute: c.isActiveRoute,
                                        href: c.href,
                                        state: /* Closed */2
                                      };
                              }));
                }));
  };
  var outerRef = React.useRef(null);
  useOutsideClick(outerRef, resetCollapsibles);
  var windowWidth = Curry._1(useWindowWidth, undefined);
  var allowHover = windowWidth !== undefined ? windowWidth > 576 : true;
  var nonCollapsibleOnMouseEnter = function (evt) {
    evt.preventDefault();
    return resetCollapsibles(undefined);
  };
  React.useEffect((function () {
          var events = router.events;
          var onChangeComplete = function (_url) {
            resetCollapsibles(undefined);
            return Curry._1(setOverlayOpen, (function (param) {
                          return false;
                        }));
          };
          Curry._2(Next.Router.Events.on, events, {
                NAME: "routeChangeComplete",
                VAL: onChangeComplete
              });
          Curry._2(Next.Router.Events.on, events, {
                NAME: "hashChangeComplete",
                VAL: onChangeComplete
              });
          return (function (param) {
                    Curry._2(Next.Router.Events.off, events, {
                          NAME: "routeChangeComplete",
                          VAL: onChangeComplete
                        });
                    return Curry._2(Next.Router.Events.off, events, {
                                NAME: "hashChangeComplete",
                                VAL: onChangeComplete
                              });
                  });
        }), []);
  var fixedNav = fixed ? "fixed z-30 top-0" : "";
  var onStateChange = function (id, state) {
    Curry._1(setCollapsibles, (function (prev) {
            return prev.reduce((function (acc, next) {
                          if (next.title === id) {
                            acc.push({
                                  title: next.title,
                                  children: next.children,
                                  isActiveRoute: next.isActiveRoute,
                                  href: next.href,
                                  state: state
                                });
                          }
                          return acc;
                        }), []);
          }));
    
  };
  var collapsibleElements = match[0].map(function (coll) {
        return React.createElement(Navigation$CollapsibleLink, {
                    title: coll.title,
                    onStateChange: onStateChange,
                    allowHover: allowHover,
                    id: coll.title,
                    state: coll.state,
                    active: Curry._1(coll.isActiveRoute, route),
                    children: coll.children,
                    key: coll.title
                  });
      });
  return React.createElement("nav", {
              ref: outerRef,
              className: fixedNav + " flex xs:justify-center w-full h-16 bg-gray-95 shadow text-white-80 text-14",
              id: "header",
              style: {
                minWidth: minWidth
              }
            }, React.createElement("div", {
                  className: "flex justify-between mx-4 md:mx-8 items-center h-full w-full max-w-1280"
                }, React.createElement("div", {
                      className: "h-8 w-8 lg:h-10 lg:w-32"
                    }, React.createElement("a", {
                          className: "block hover:cursor-pointer w-full h-full flex justify-center items-center font-bold",
                          href: "/"
                        }, React.createElement("img", {
                              className: "lg:hidden",
                              src: "/static/nav-logo@2x.png"
                            }), React.createElement("img", {
                              className: "hidden lg:block",
                              src: "/static/nav-logo-full@2x.png"
                            }))), React.createElement("div", {
                      className: "flex items-center xs:justify-between w-full bg-gray-95 sm:h-auto sm:relative"
                    }, React.createElement("div", {
                          className: "flex ml-10 space-x-5 w-full max-w-320",
                          style: {
                            maxWidth: "26rem"
                          }
                        }, collapsibleElements, React.createElement(Next.Link.make, {
                              href: "/docs/manual/latest/api",
                              children: React.createElement("a", {
                                    className: linkOrActiveApiSubroute(route),
                                    onMouseEnter: nonCollapsibleOnMouseEnter
                                  }, "API")
                            }), React.createElement(Next.Link.make, {
                              href: "/try",
                              children: React.createElement("a", {
                                    className: "hidden xs:block " + linkOrActiveLink("/try", route),
                                    onMouseEnter: nonCollapsibleOnMouseEnter
                                  }, "Playground")
                            }), React.createElement(Next.Link.make, {
                              href: "/blog",
                              children: React.createElement("a", {
                                    className: "hidden xs:block " + linkOrActiveLinkSubroute("/blog", route),
                                    onMouseEnter: nonCollapsibleOnMouseEnter
                                  }, "Blog")
                            }), React.createElement(Next.Link.make, {
                              href: "/community",
                              children: React.createElement("a", {
                                    className: "hidden xs:block " + linkOrActiveLink("/community", route),
                                    onMouseEnter: nonCollapsibleOnMouseEnter
                                  }, "Community")
                            })), React.createElement("div", {
                          className: "hidden md:flex items-center"
                        }, React.createElement("div", {
                              className: "hidden sm:block mr-6"
                            }, React.createElement(DocSearch.make, {})), React.createElement("a", {
                              className: "mr-5 no-underline block text-inherit hover:cursor-pointer hover:text-fire-30 text-gray-40 mb-px",
                              href: githubHref,
                              rel: "noopener noreferrer",
                              target: "_blank",
                              onMouseEnter: nonCollapsibleOnMouseEnter
                            }, React.createElement(Icon.Github.make, {
                                  className: "w-6 h-6 opacity-50 hover:opacity-100"
                                })), React.createElement("a", {
                              className: "mr-5 no-underline block text-inherit hover:cursor-pointer hover:text-fire-30 text-gray-40 mb-px",
                              href: "https://twitter.com/rescriptlang",
                              rel: "noopener noreferrer",
                              target: "_blank",
                              onMouseEnter: nonCollapsibleOnMouseEnter
                            }, React.createElement(Icon.Twitter.make, {
                                  className: "w-6 h-6 opacity-50 hover:opacity-100"
                                })), React.createElement("a", {
                              className: link,
                              href: discourseHref,
                              rel: "noopener noreferrer",
                              target: "_blank",
                              onMouseEnter: nonCollapsibleOnMouseEnter
                            }, React.createElement(Icon.Discourse.make, {
                                  className: "w-6 h-6 opacity-50 hover:opacity-100"
                                }))))), React.createElement("button", {
                  className: "h-full px-4 xs:hidden flex items-center hover:text-white",
                  onClick: (function (evt) {
                      evt.preventDefault();
                      resetCollapsibles(undefined);
                      return Curry._1(setOverlayOpen, (function (prev) {
                                    return !prev;
                                  }));
                    })
                }, React.createElement(Icon.DrawerDots.make, {
                      className: "h-1 w-auto block " + (
                        isOverlayOpen ? "text-fire" : ""
                      )
                    })), React.createElement("div", {
                  className: (
                    isOverlayOpen ? "flex" : "hidden"
                  ) + " sm:hidden flex-col fixed top-0 left-0 h-full w-full z-30 sm:w-9/12 bg-gray-100 sm:h-auto sm:flex sm:relative sm:flex-row sm:justify-between",
                  style: {
                    minWidth: minWidth,
                    top: "4rem"
                  }
                }, React.createElement(Navigation$MobileNav, {
                      route: route
                    })));
}

var make = Navigation;

export {
  make ,
  
}
/* Icon Not a pure module */
